Tkinter, creating a window and keeping it open
    import tkinter
    window = tkinter.Tk()
    window.mainloop()

Tkinter, adding a title to a window
    window.title("My first GUI")

Tkinter, setting a windows min size
    windows will automatically resize to display everything in them, but there's a method to force a min size
    window.minsize(width=500, height=300)

Tkinter, creating a label and adding it to the window
    my_label = tkinter.Label(text="My Label", font=("Arial", 24, "bold"))
    my_label.pack() #More info about the packer https://tcl.tk/man/tcl8.6/TkCmd/pack.htm

Tkinter, changing properties
    Properties can be changed by accessing them directly
        my_label["text"] = "some new text"
    or thought the config method
        my_label.config(text="more new text")

Tkinter, creating a button and adding it to the window
    button = tkinter.Button(text="Click Me")
    button.pack()

Tkinter, adding a click command to a button
    the command property on the button class points to a function that'll be fired when the button is clicked,
    this can be set as part of the constructor or accessed in the usual way
    def button_clicked():
        global my_label
        my_label["text"] = "Button Got Clicked"

    button["command"] = button_clicked

Tkinter, adding a image to a button
    right_img = PhotoImage(file=RIGHT_IMAGE)
    right_button = Button(image=right_img, highlightthickness=0)

Tkinter, adding a textbox
    input = tkinter.Entry(width=10)
    input.pack()

Tkinter, getting the value from a textbox
    my_label["text"] = input.get()

Tkinter, setting the focus on a textbox
    website_input.focus()

Tkinter, setting default text in a textbox
    the insert method takes 2 params, the first is the index to add the text from (END is a tkinter constant
    for the last index), the 2nd is the text
    username_input.insert(END, DEFAULT_USERNAME)

Tkinter, wiping text from a textbox
    website_input.delete(0, END)

Tkinter, adding padding around elements or windows
    the padx and pady properties determine the space between elements or around the edge of the window
    window.config(padx=100, pady=200)

Tkinter, positioning elements
    elements can be position in one of 3 ways, if none are used then the element won't appear. Grid and pack can't be used together
    pack: the pack method will place the element relative to the side of the screen using the side property
        button.pack(side="left")
    place: the place method places the element at the x,y coordinates specified
        button.place(x=100, y=200)
    grid: the grid method using columns and rows to specify where an element will appear, this is in relation to existing elements
        button.grid(column=1, row=1) # an additional argument columnspan can be used to span multiple columns

Tkinter, importing an image from an image file
    image files are imported using the PhotoImage class, and can be used along with a canvas object to display the image
    img = PhotoImage(file="my_image.png")

Tkinter, creating a canvas
    Canvas objects are used to layer different object in a window
    canvas = Canvas(width=200, height=224)
    canvas.pack()

Tkinter, adding an image to a canvas
    The first 2 args in the create image method specify where the image should appear within the canvas, these specify
    the center of the image
    tomato_img = PhotoImage(file="tomato.png")
    canvas = Canvas(width=200, height=224)
    canvas.create_image(102, 112, image=tomato_img)

Tkinter, adding text to a canvas
    The create_text method can be used to add text. The first 2 args are positional x/y, text povides the actual text,
    fill determins the color of the text, the width value specifies how long each line of text should be causing the text
    to wrap each line
    canvas.create_text(103, 130, text="00:00", fill="white", font=(FONT_NAME, 35, "bold"), width=280)


Useful website of color cordination https://colorhunt.co/

Tkinter, removing the box around a canvas
    If you change the background colour of both the widow and the canvas to something other than white, you'll notice
    a white box around the canvas. This can be removed by specifying the property highlightthickness=0 on the canvas
    e.g. canvas = Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)

Tkinter, accessing elements on the canvas
    When one of the canvas create methods is ran it returns the object created, this can be used with the itemconfig
    canvas method to access that items config
    e.g.
        canvas = Canvas(width=200, height=224, bg=YELLOW, highlightthickness=0)
        timer_text = canvas.create_text(100, 130, text="00:00", fill="white", font=(FONT_NAME, 35, "bold"))
        canvas.itemconfig(timer_text, text=f"{count_min}:{count_sec}")

Tkinter, window after method
    the after method on the window class can be used to run a function after a number of milliseconds have passed
    e.g.
        window.after(1000, count_down, count - 1)
    the 2nd argument is the function to run and any argument from the 3rd on is passed as the parameters

Tkinter, cancelling a window after method
    the widow after method returns a variable that can be used to cancel the running process
        timer = window.after(1000, count_down, count - 1)
        window.after_cancel(timer)

Tkinter, using messageboxes
    there are a number of different messageboxes included in tkinter, to use them you must first import the messagebox
    module
    e.g.
        from tkinter import messagebox
    You can then call message boxes like the error message box
        messagebox.showerror(title="Valatation Error", message="Please complete all boxes")
    or the ok/cancel message box which returns a boolean
        is_ok = messagebox.askokcancel(title="Confirmation", message=message_text)